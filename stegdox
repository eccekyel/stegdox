#!/bin/bash
# Dox steganography database

# Path del database
DB_PATH=""

# Ruta de almacenamiento de datos temporales
TMP_PATH="/tmp/st3gd0x"

# Ruta del archivo portador Objetivo 
OB_PATH=""

# Ruta del script, donde deben ir ademas los archivos description.jpg description.txt y ficha.txt
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo -e $DIR

# Colores
blanco="\033[1;37m"
gris="\033[0;37m"
magenta="\033[0;35m"
rojo="\033[1;31m"
verde="\033[1;32m"
amarillo="\033[1;33m"
azul="\033[1;34m"
rescolor="\e[0m"



###############################################################################
######                             FUNCIONES                            #######
###############################################################################

# Consultar Base de Datos

# Modificar Base de Datos
function modificar {
	echo -e "¿Qué acción desea realizar?"
	echo -e $rojo "Operación a realizar:"
	echo -e $verde "	1) Crear nuevo objetivo"
	echo -e $verde "	2) Modificar información de algún objetivo"
	echo -e $verde "	3) Salir"
	echo -e $rescolor ""
	echo "                                       "
	echo -n "      #> "
	read choice
	case $choice in
		1 ) newEntity;;
		2 ) modEntity;;
		3 ) rm -R $TMP_PATH; exit;;
		* ) echo -e "opción desconocida, elige de nuevo" ;;
	esac
	echo -e ""
}

function newEntity {
	echo -e $rojo"Para crear un nuevo objetivo debes tener algun archivo jpg, bmp, wav o au"
	echo -e $rojo"en el directorio que has elegido y que no has utilizado para otro objetivo"
	echo -e $rojo"\nCuando tengas el archivo en el directorio escribe aquí el nombre del archivo"
	echo -e $rojo"junto a su extensión, por ejemplo: ejemplo.jpg"$rescolor
	echo "                                       "
	echo -n "      #> "
	read portador
	if [ ! -f $DB_PATH"/"$portador ]; then
		echo -e $rojo"ADVERTENCIA! EL ARCHIVO PORTADOR QUE HAS INDICADO NO EXISTE"
		echo -e "ESCRIIBE  UN PORTADOR PERMITIDO  O REVISA SI LO HAS PUESTO EN EL"
		echo -e "DIRECTORIO QUE ESCOGISTE COMO BASE DE DATOS"$rescolor
		newEntity
	else
		echo -e $azul"Grabando ficha vacía en el archivo"$rescolor
		echo -e $azul"\nEscribe una contraseña para luego desencriptar"$rescolor
		steghide embed -cf $DB_PATH"/"$portador -ef $DIR"/""ficha.txt"
		
		#Agregar indice al archivo description
		cd $TMP_PATH
		echo -e $azul"Escriba su contraseña del description"
		echo -e $rescolor""
		steghide --extract -sf $DB_PATH"/""description.jpg"
		echo -e " "
		echo -e $rojo "Nombre ID del objetivo"$rescolor
		echo "                                       "
		echo -n "      #> "
		echo $azul"	espere un momento"		
		sleep 3
		read nombreObjetivo
		echo -e $azul"Creando índice para el nuevo objetivo"$rescolor
		echo $nombreObjetivo" ---> "$portador >> $TMP_PATH"/""description.txt"
		echo -e $azul"Sobrescriba su contraseña del description"$recolor
		steghide embed -cf $DB_PATH"/""description.jpg" -ef $TMP_PATH"/""description.txt"
		echo -e $azul"Listando objetivos en el directorio escogido"
		echo -e $rescolor""
		listar
		rm description.txt
		cd $DIR
	fi
}

function auxMod {
	echo -e $rojo "Número del campo que desea modificar:"$rescolor
	echo "                                       "
	echo -n "      #> "
	sleep 3.0
	read aModificar

	echo -e " "
	echo -e $rojo "Ingrese nueva información"$rescolor
	echo "                                       "			
	echo -n "      #> "
	read nuevaInfo
	sleep 3.0
	puntero=0
	cd $TMP_PATH
	mkdir tmp
	while read line ; do
		puntero=$(($puntero+1));
		if [[ puntero -lt $aModificar ]]; then
			echo $line >> $TMP_PATH"/tmp/ficha.txt"
		else
			if [[ puntero -eq $aModificar ]]; then
				echo -e $line" "$nuevaInfo >> $TMP_PATH"/tmp/ficha.txt"
			else
				echo $line >> $TMP_PATH"/tmp/ficha.txt"
			fi
		fi
	done < $TMP_PATH/ficha.txt
	echo -e $azul"Escriba ahora la contraseña para su archivo portador"$rescolor
	steghide embed -cf $OB_PATH -ef $TMP_PATH"/tmp/ficha.txt"
	rm -R $TMP_PATH"/tmp"
	rm $TMP_PATH"/ficha.txt"

	# Menú preguntando qué hacer
	echo -e $rojo "¿Qué desea hacer ahora?"$rescolor
	echo -e $verde "	1) Modificar otro campo"
	echo -e $verde "	2) Volver al menú de objetivos"	
	read choice
	case $choice in
		1 ) entityInfo; auxMod;;
		2 ) modificar;;
		* ) echo -e $rojo"Opción no válida, saliendo...";;
	esac
}

function modEntity {
	entityInfo
	auxMod
}

function entityInfo {
	echo -e $rojo"Escriba el ID del archivo a modificar"$rescolor
	echo "                                       "
	echo -n "      #> "
	read portadorx
	OB_PATH=$DB_PATH"/"$portadorx
	cd $TMP_PATH
	echo  -e $azul"Escriba la contraseña del archivo"
	echo  -e $rescolor""
	steghide --extract -sf $OB_PATH
	echo  -e " "
	echo  -e $azul"Datos extraídos exitosamente"
	echo  -e "Listando campos del objetivo"
	echo  -e $rescolor""
	i=0
	while read line ; do
		i=$(($i+1));
   		echo -e $verde$i")" $amarillo$line
	done < $TMP_PATH/ficha.txt
	echo -e $rescolor
	cd $DIR
}

function requirements {
	echo ""
	echo -e "Consultando requerimientos:"
	echo ""
	echo -ne "Steghide..........."
	if [ ! hash steghide 2>/dev/null ]; then
		echo -e "\e[1;31mNo se encuentra instalado"$rescolor" (prueba con sudo apt-get install steghide)"
		exit
	else
		echo -e "\e[1;32mOK!"$rescolor""
	fi
	sleep 0.025
	echo ""
}

function askPath { 
	while true; do
		echo -e $amarillo "Inserte la ruta hacia su base de datos"
		echo -e $rescolor ""
		echo "                                       "
		echo -n "      #> "
		read dir_path
	
		if [ ! -d $dir_path ]; then
			echo -e $rojo "Este directorio no existe, por favor ingrese alguno válido"
		else
			DB_PATH=$dir_path
			break 
		fi
	echo -e $DB_PATH
	done
}

# Desencriptar y mostrar listado de objetivos en la base de datos con sus respectivos
# archivos asociados 
function disList { 
	DESCRIPTION=$DB_PATH"/""description.jpg"
	if [ ! -f $DESCRIPTION ]; then
		echo -e "En este directorio no existe el archivo description.jpg,"
		echo -e "¿qué desea hacer al respecto?"
		echo -e $rojo "Operación a realizar:"
		echo -e $verde "	1) Crear el archivo en este directorio"
		echo -e $verde "	2) Elegir otro directorio"
		echo -e $rescolor ""
		echo "                                       "
		echo -n "      #> "
		read choice
		case $choice in
			1 ) cp -i $DIR"/""description.jpg" $DB_PATH"/""description.jpg";
				echo  -e $azul"Creando archivo description.jpg ...";
				echo  -e $azul"Por favor escribe una password ...";
				echo  -e $rescolor"";
				steghide embed -cf $DESCRIPTION -ef $DIR"/""description.txt";
				echo  " ";
				disList;; #Esto lo hace saltar al else
			2 ) askPath; askTask;;
			* ) echo  "opción desconocida, elige de nuevo"; disList;;
		esac
	else
		cd $TMP_PATH
		echo -e $azul"Escriba su contraseña para extraer los datos"
		echo -e $rescolor""
		steghide --extract -sf $DB_PATH"/""description.jpg"
		echo " "
		echo -e $azul"Datos extraídos exitosamente"
		echo "Listando objetivos en el directorio escogido"
		echo -e $rescolor""
		listar
		cd $DIR
	fi
}

function listar {
	i=0
	echo -e $amarillo"   Nombre" $blanco" --->" $amarillo" ID"
	while read line ; do 
		i=$(($i+1));
		if [ $i -lt 19 ]; then
			continue
		else
   			echo -e $verde$((i-19))")" $rojo$line
		fi
	done < $TMP_PATH/description.txt
	echo -e $rescolor""
}

###############################################################################
######                                MAIN                              #######
###############################################################################

# Crea directorio temporal
if [ ! -d $TMP_PATH ]; then
	mkdir $TMP_PATH
fi

echo -e ""
requirements
echo -e ""
askPath
disList
modificar
read # eliminar esto

# Elimina el directorio temporal y todo su contenido
rm -R $TMP_PATH
